application:
  configuration:
    configuration.cookbooks_url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-hadoop-cookbooks-stable-v5.tar.gz"
    configuration.repository_url: "http://archive.cloudera.com"
    configuration.cloudera_manager_version: "5.1.3"
    configuration.cloudera_hadoop_version: "5.1.3"
  interfaces:
    configuration:
      cookbooks_url: "bind(cloudera-oozie#input.cookbooks_url)"
      repository_url: "bind(cloudera-oozie#input.repository_url)"
      cloudera_manager_version: "bind(cloudera-oozie#input.cloudera_manager_version)"
      cloudera_hadoop_version: "bind(cloudera-oozie#input.cloudera_hadoop_version)"
    compute-Manager: 
      "*": "bind(cloudera-oozie#compute-Manager.*)"
    vms:
      Node_Manager_DNS: "bind(cloudera-oozie#vms.Node_Manager_DNS)"
      Node_Master_DNS: "bind(cloudera-oozie#vms.Node_Master_DNS)"
      DataNodesDNS: "bind(cloudera-oozie#vms.DataNodesDNS)"
    cloudera-hadoop:
      "*": "bind(cloudera-oozie#cloudera-hadoop.*)"
    cloudera-oozie:
      Oozie_Server: "bind(cloudera-oozie#result.Oozie_Server)"
      Oozie_Web: "bind(cloudera-oozie#result.Oozie_Web)"
      application-pic: "bind(metadata#output.application-pic)"
      run-workflow: "bind(cloudera-oozie#actions.run-workflow)"
  components:
    metadata:
      type: cobalt.common.Constants
      interfaces:
        output:
          application-pic:
            type: publish-signal(map<string, object>)
            name: ""
      configuration:
        configuration.values:
          output.application-pic:
            large: "https://s3.amazonaws.com/qubell-images/oozie_200x.png"
            small: "https://s3.amazonaws.com/qubell-images/oozie_200x.png"
            small-height: 47
    cloudera-oozie:
      type: workflow.Instance
      interfaces:
        input:
          repository_url: configuration(string)
          cookbooks_url: configuration(string)
          cloudera_hadoop_version: configuration(string)
          cloudera_manager_version: configuration(string)
        actions:
          run-workflow:
            type: receive-command(string archive-url, string data-dir => string status)
            name: Run workflow
        compute-Manager:
          networks:        consume-signal(map<string, map<string, string>>)
          exec:            send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:        send-command(string filename, bytes payload)
          get-file:        send-command(string filename => bytes payload)
        vms:
          Node_Manager_DNS: consume-signal(string)
          Node_Master_DNS: consume-signal(string)
          DataNodesDNS: consume-signal(list<string>)
        cloudera-hadoop:
          NameNode: consume-signal(list<string>)
          Primary_NameNode: consume-signal(list<string>)
          Secondary_NameNode: consume-signal(list<string>)
          Hbase_Master: consume-signal(list<string>)
          Hbase_MasterDns: consume-signal(string)
          JobTracker: consume-signal(list<string>)
          cloudera_hdfsWebui: consume-signal(list<string>)
          cloudera_jobtrackerWebui: consume-signal(list<string>)
          cloudera_hbaseWebui: consume-signal(list<string>)
        result:
          Oozie_Server:
            type: publish-signal(list<string>)
            name: Oozie server
          Oozie_Web:
            type: publish-signal(string)
            name: Oozie web UI
      required: [vms, cloudera-hadoop, compute-Manager]
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            steps:
              - get-signals:
                  action: getSignals
                  parameters:
                    multi: true
                  output:
                    signals: result
              - install-oozie:
                  action: chefrun
                  phase: install-oozie
                  precedingPhases: [ get-signals ]
                  parameters:
                    isSudo: true
                    isSolo: true
                    roles: [ "compute-Manager" ]
                    recipeUrl: "{$.cookbooks_url}"
                    runList: [ "recipe[cloudera::oozie]" ]
                    retryCount: 2
                    jattrs:
                      cloudera:
                        master:
                          host: "{$.signals.vms.*.Node_Master_DNS[0]}"
                          ip: "{$.signals.vms.*.Node_Master[0]}"
                        manager:
                          host: "{$.signals.vms.*.Node_Manager_DNS[0]}"
                          version: "{$.cloudera_manager_version}"
                        jobtracker:
                          host: "{$.signals.vms.*.Node_Manager_DNS[0]}"
                          ip: "{$.signals.vms.*.Node_Manager[0]}"
                        hadoop:
                          version: "{$.cloudera_hadoop_version}"
                        repository_url: "{$.repository_url}"
              - start-oozie:
                  action: chefrun
                  phase: start-oozie
                  precedingPhases: [ install-oozie ]
                  parameters:
                    isSudo: true
                    isSolo: true
                    roles: [ "compute-Manager" ]
                    recipeUrl: "{$.cookbooks_url}"
                    runList: [ "recipe[cloudera::start_oozie]" ]
                    jattrs:
                      cloudera:
                        manager:
                          host: "{$.signals.vms.*.Node_Manager_DNS[0]}"
                          version: "{$.cloudera_manager_version}"
                        hadoop:
                          version: "{$.cloudera_hadoop_version}"
                        repository_url: "{$.repository_url}"
            return:
              - Oozie_Server:
                  description: "Oozie server node"
                  value: "{$.signals.compute-Manager.*.networks.public.ip}"
              - Oozie_Web:
                  description: "Oozie web UI"
                  value: "http://{$.signals.vms.*.Node_Manager_DNS[0]}:11000/oozie"

          run-workflow:
            steps:
              - get-signals:
                  action: getSignals
                  parameters:
                    multi: true
                  output:
                    signals: result
              - upload-workflow:
                  action: execrun
                  precedingPhases: [ get-signals ]
                  parameters:
                    isSudo: true
                    roles: [ "compute-Manager" ]
                    command:
                        - |
                           TDIR=`mktemp -d`
                           cd $$TDIR
                           curl -kL "{$.archive-url}" | tar -xzf - &>/dev/null
                           hadoop fs -put ./ "{$.data-dir}/flow"
                           echo "nameNode=hdfs://{$.signals.vms.*.Node_Master_DNS[0]}:8020" >> job.properties
                           echo "jobTracker={$.signals.vms.*.Node_Manager_DNS[0]}:8021" >> job.properties
                           echo "inputDir={$.data-dir}/input" >> job.properties
                           echo "outputDir={$.data-dir}/output" >> job.properties
                           echo "oozie.wf.application.path=hdfs://{$.signals.vms.*.Node_Master_DNS[0]}:8020{$.data-dir}/flow" >> job.properties
                           echo -n $$TDIR
                  output:
                    workflow-path: stdout
              - run-workflow:
                  action: execrun
                  precedingPhases: [ upload-workflow ]
                  parameters:
                    isSudo: true
                    roles: [ "compute-Manager" ]
                    command:
                        - |
                           JOB=`oozie job -oozie http://localhost:11000/oozie -config "{$.workflow-path['*'][0]}/job.properties" -run | cut -d' ' -f2`
                           RUNNING=1
                           while [ $$RUNNING -eq 1 ]; do
                             RUNNING=`oozie job -oozie http://localhost:11000/oozie -info $$JOB | grep Ended | grep -c ': -'`
                           done
                           oozie job -oozie http://localhost:11000/oozie -info $$JOB | grep Status | head -n1 | xargs echo | cut -d' ' -f3
                  output:
                    status: stdout
              - cleanup-workflow:
                  action: execrun
                  precedingPhases: [ run-workflow ]
                  parameters:
                    isSudo: true
                    roles: [ "compute-Manager" ]
                    command:
                        - rm -rf {$.workflow-path['*'][0]}
            return:
              - status:
                  description: Oozie job status
                  value: "{$.status['*'][0]}"
